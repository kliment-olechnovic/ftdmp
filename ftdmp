#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'ftdmp' docks, scores and ranks two structures of proteins or nucleic acids

Options:
    --job-name                string  *  job name
    --static-file             string  *  static input file path
    --static-sel              string     query to restrict static atoms, default is '[]'
    --static-chain            string     chain name or chain renaming rule to apply for static atoms, default is ''
    --mobile-file             string  *  mobile input file path
    --mobile-sel              string     query to restrict mobile atoms, default is '[]'
    --mobile-chain            string     chain name or chain renaming rule to apply for mobile atoms, default is ''
    --subselect-contacts      string     query to subselect inter-chain contacts for scoring, default is '[]'
    --reference               string     input structure file to compute CAD-score with, default is ''
    --openmm-forcefield       string     forcefield name fo OpenMM-based operations, default is ''
    --conda-path              string     conda installation path, default is ''
    --conda-env               string     conda environment name, default is ''
    --ftdock-keep             number     ftdock keep parameter, default is 1
    --ftdock-angle-step       number     ftdock angle step parameter, default is 9
    --min-grid-sep            number     minimum grid separation between same-rotation translations, default is 20
    --parallel-docking        number     number of processes to run when docking, default is 8
    --parallel-scoring        number     number of processes to run when scoring, default is 8
    --sbatch-docking          string     sbatch parameters to run docking in parallel, default is ''
    --sbatch-scoring          string     sbatch parameters to run scoring in parallel, default is ''
    --score-symmetry          string     flag to score symmetry, default is 'false'
    --remap-cadscore          string     flag to use optimal chains remapping for CAD-score, default is 'false'
    --scoring-full-top        number     number of top complexes to keep after full scoring stage, default is 1000
    --scoring-rank-names      string  *  rank names to use, or name of a standard set of rank names
    --scoring-ranks-top       number     number of top complexes to consider for each ranking, default is 100
    --scoring-jury-slices     string     slice sizes sequence definition for ranks jury scoring, default is '10 10 100'
    --redundancy-threshold    number     minimal ordered redundancy value to accept, default is 1
    --build-complexes         number     number of top complexes to build, default is 10
    --output-dir              string  *  output direectory path
    --help | -h                          flag to display help message and exit

Examples:

    ftdmp --job-name 'j1' --static-file './chainA.pdb' --mobile-file './chainB.pdb' \
      --scoring-rank-names 'standard_for_protein_protein' --output-dir './results'

EOF
exit 1
}

################################################################################

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [ -z "$FTDMPDIR" ]
then
	export FTDMPDIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
	export PATH="${FTDMPDIR}/core/voronota-js_release:${FTDMPDIR}/core/3D_Dock/progs:${FTDMPDIR}:${PATH}"
fi

JOB_NAME=""
STATIC_STRUCTURE_FILE=""
STATIC_STRUCTURE_SELECTION="[]"
STATIC_STRUCTURE_CHAIN=""
MOBILE_STRUCTURE_FILE=""
MOBILE_STRUCTURE_SELECTION="[]"
MOBILE_STRUCTURE_CHAIN=""
INTERFACE_SUBSELECTION="[]"
REFERENCE_STRUCTURE_FILE_FOR_COMPARISON=""
OPENMM_FORCEFIELD=""
CONDA_PATH=""
CONDA_ENV=""
FTDOCK_KEEP="1"
FTDOCK_ANGLE_STEP="9"
MIN_GRID_SEP="20"
DOCKING_PROCESSORS="8"
SCORING_PROCESSORS="8"
DOCKING_SBATCH=""
SCORING_SBATCH=""
SCORE_SYMMETRY="false"
REMAP_CADSCORE="false"
SCORING_TOP_STAGE1="1000"
SCORING_RANKS=""
SCORING_TOP_STAGE2="100"
SCORING_RANKS_JURY_SLICES="10 50" 
NUMBER_OF_COMPLEXES_TO_BUILD=10
REDUNDANCY_THRESHOLD="1"
OUTPUT_PATH=""
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--job-name)
		JOB_NAME="$OPTARG"
		shift
		;;
	--static-file)
		STATIC_STRUCTURE_FILE="$OPTARG"
		shift
		;;
	--static-sel)
		STATIC_STRUCTURE_SELECTION="$OPTARG"
		shift
		;;
	--static-chain)
		STATIC_STRUCTURE_CHAIN="$OPTARG"
		shift
		;;
	--mobile-file)
		MOBILE_STRUCTURE_FILE="$OPTARG"
		shift
		;;
	--mobile-sel)
		MOBILE_STRUCTURE_SELECTION="$OPTARG"
		shift
		;;
	--mobile-chain)
		MOBILE_STRUCTURE_CHAIN="$OPTARG"
		shift
		;;
	--subselect-contacts)
		INTERFACE_SUBSELECTION="$OPTARG"
		shift
		;;
	--reference)
		REFERENCE_STRUCTURE_FILE_FOR_COMPARISON="$OPTARG"
		shift
		;;
	--openmm-forcefield)
		OPENMM_FORCEFIELD="$OPTARG"
		shift
		;;
	--conda-path)
		CONDA_PATH="$OPTARG"
		shift
		;;
	--conda-env)
		CONDA_ENV="$OPTARG"
		shift
		;;
	--ftdock-keep)
		FTDOCK_KEEP="$OPTARG"
		shift
		;;
	--ftdock-angle-step)
		FTDOCK_ANGLE_STEP="$OPTARG"
		shift
		;;
	--min-grid-sep)
		MIN_GRID_SEP="$OPTARG"
		shift
		;;
	--parallel-docking)
		DOCKING_PROCESSORS="$OPTARG"
		shift
		;;
	--parallel-scoring)
		SCORING_PROCESSORS="$OPTARG"
		shift
		;;
	--sbatch-docking)
		DOCKING_SBATCH="$OPTARG"
		shift
		;;
	--sbatch-scoring)
		SCORING_SBATCH="$OPTARG"
		shift
		;;
	--score-symmetry)
		SCORE_SYMMETRY="$OPTARG"
		shift
		;;
	--remap-cadscore)
		REMAP_CADSCORE="$OPTARG"
		shift
		;;
	--scoring-full-top)
		SCORING_TOP_STAGE1="$OPTARG"
		shift
		;;
	--scoring-rank-names)
		SCORING_RANKS="$OPTARG"
		shift
		;;
	--scoring-ranks-top)
		SCORING_TOP_STAGE2="$OPTARG"
		shift
		;;
	--scoring-jury-slices)
		SCORING_RANKS_JURY_SLICES="$OPTARG"
		shift
		;;
	--build-complexes)
		NUMBER_OF_COMPLEXES_TO_BUILD="$OPTARG"
		shift
		;;
	--redundancy-threshold)
		REDUNDANCY_THRESHOLD="$OPTARG"
		shift
		;;
	--output-dir)
		OUTPUT_PATH="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

[ -n "$JOB_NAME" ] || { echo >&2 "Error: job name not provided"; exit 1;}

[ -n "$STATIC_STRUCTURE_FILE" ] || { echo >&2 "Error: static structure file not provided"; exit 1;}
[ -s "$STATIC_STRUCTURE_FILE" ] || { echo >&2 "Error: static structure file non-existing or empty"; exit 1;}

[ -n "$STATIC_STRUCTURE_SELECTION" ] || { echo >&2 "Error: static structure selection not defined"; exit 1; }

[ -n "$MOBILE_STRUCTURE_FILE" ] || { echo >&2 "Error: mobile structure file not provided"; exit 1;}
[ -s "$MOBILE_STRUCTURE_FILE" ] || { echo >&2 "Error: mobile structure file non-existing or empty"; exit 1;}

[ -n "$MOBILE_STRUCTURE_SELECTION" ] || { echo >&2 "Error: mobile structure selection not defined"; exit 1; }

[ -n "$INTERFACE_SUBSELECTION" ] || { echo >&2 "Error: contacts subselection not defined"; exit 1; }

[ -n "$SCORING_RANKS" ] || { echo >&2 "Error: scoring rank names not provided"; exit 1;}

[ -n "$SCORING_RANKS_JURY_SLICES" ] || { echo >&2 "Error: scoring ranks jury slices not defined"; exit 1;}

[ -n "$OUTPUT_PATH" ] || { echo >&2 "Error: output path not provided"; exit 1;}

################################################################################

if [ "$SCORING_RANKS" == "standard_for_protein_protein" ]
then
	SCORING_RANKS="FIV_iface_energy_rank  FIV_energy_clash_tour_rank  FIV_sr_iface_energy_rank  FIV_sr_energy_clash_tour_rank  FIVb_iface_energy_rank  FIVb_energy_clash_tour_rank  FIVb_sr_iface_energy_rank  FIVb_sr_energy_clash_tour_rank"
fi

if [ "$SCORING_RANKS" == "standard_for_generic" ]
then
	SCORING_RANKS="FIVb_iface_energy_rank  FIVb_energy_clash_tour_rank"
fi

SCORING_MODE_PROTEIN="false"
SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT="false"
SCORING_MODE_GENERIC="false"
SCORING_MODE_GENERIC_SIDECHAIN_REBUILT="false"

if [[ "$SCORING_RANKS" == *"FIV_"* ]]
then
	SCORING_MODE_PROTEIN="true"
fi

if [[ "$SCORING_RANKS" == *"FIV_sr_"* ]]
then
	SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT="true"
fi

if [[ "$SCORING_RANKS" == *"FIVb_"* ]]
then
	SCORING_MODE_GENERIC="true"
fi

if [[ "$SCORING_RANKS" == *"FIVb_sr_"* ]]
then
	SCORING_MODE_GENERIC_SIDECHAIN_REBUILT="true"
fi

if [ "$SCORING_MODE_PROTEIN" != "true" ] && [ "$SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT" != "true" ] && [ "$SCORING_MODE_GENERIC" != "true" ] && [ "$SCORING_MODE_GENERIC_SIDECHAIN_REBUILT" != "true" ]
then
	echo >&2 "Error: no scoring mode compatible with the provided rank names"
	exit 1
fi

################################################################################

OUTPUT_PATH="${OUTPUT_PATH}/${JOB_NAME}"
mkdir -p "$OUTPUT_PATH"

cat > "${OUTPUT_PATH}/job_parameters.txt" << EOF
${BASH_SOURCE[0]} \\
--job-name                '$JOB_NAME' \\
--static-file             '$STATIC_STRUCTURE_FILE' \\
--static-sel              '$STATIC_STRUCTURE_SELECTION' \\
--static-chain            '$STATIC_STRUCTURE_CHAIN' \\
--mobile-file             '$MOBILE_STRUCTURE_FILE' \\
--mobile-sel              '$MOBILE_STRUCTURE_SELECTION' \\
--mobile-chain            '$MOBILE_STRUCTURE_CHAIN' \\
--subselect-contacts      '$INTERFACE_SUBSELECTION' \\
--reference               '$REFERENCE_STRUCTURE_FILE_FOR_COMPARISON' \\
--openmm-forcefield       '$OPENMM_FORCEFIELD' \\
--conda-path              '$CONDA_PATH' \\
--conda-env               '$CONDA_ENV' \\
--ftdock-keep             '$FTDOCK_KEEP' \\
--ftdock-angle-step       '$FTDOCK_ANGLE_STEP' \\
--min-grid-sep            '$MIN_GRID_SEP' \\
--parallel-docking        '$DOCKING_PROCESSORS' \\
--parallel-scoring        '$SCORING_PROCESSORS' \\
--sbatch-docking          '$DOCKING_SBATCH' \\
--sbatch-scoring          '$SCORING_SBATCH' \\
--score-symmetry          '$SCORE_SYMMETRY' \\
--remap-cadscore          '$REMAP_CADSCORE' \\
--scoring-full-top        '$SCORING_TOP_STAGE1' \\
--scoring-rank-names      '$SCORING_RANKS' \\
--scoring-ranks-top       '$SCORING_TOP_STAGE2' \\
--scoring-jury-slices     '$SCORING_RANKS_JURY_SLICES' \\
--build-complexes         '$NUMBER_OF_COMPLEXES_TO_BUILD' \\
--redundancy-threshold    '$REDUNDANCY_THRESHOLD' \\
--output-dir              '$OUTPUT_PATH' \\

EOF

################################################################################

PREPARED_STATIC_STRUCTURE_FILE="${OUTPUT_PATH}/monomer_static.pdb"

{
cat "$STATIC_STRUCTURE_FILE"
echo "$STATIC_STRUCTURE_SELECTION"
echo "$STATIC_STRUCTURE_CHAIN"
echo "$OPENMM_FORCEFIELD"
} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$PREPARED_STATIC_STRUCTURE_FILE")" --dependent-file "$PREPARED_STATIC_STRUCTURE_FILE"

if [ ! -s "$PREPARED_STATIC_STRUCTURE_FILE" ]
then
	ftdmp-prepare-monomer --input "$STATIC_STRUCTURE_FILE" --output "$PREPARED_STATIC_STRUCTURE_FILE" \
	  --restrict-input "$STATIC_STRUCTURE_SELECTION" --rename-chain "$STATIC_STRUCTURE_CHAIN" \
	  --randomize --random-seed 1 --forcefield "$OPENMM_FORCEFIELD" --conda-path "$CONDA_PATH" --conda-env "$CONDA_ENV"
fi

if [ ! -s "$PREPARED_STATIC_STRUCTURE_FILE" ]
then
	echo >&2 "Error: failed to prepare static monomer structure"
	exit 1
fi

################################################################################

PREPARED_MOBILE_STRUCTURE_FILE="${OUTPUT_PATH}/monomer_mobile.pdb"

{
cat "$MOBILE_STRUCTURE_FILE"
echo "$MOBILE_STRUCTURE_SELECTION"
echo "$MOBILE_STRUCTURE_CHAIN"
echo "$OPENMM_FORCEFIELD"
} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$PREPARED_MOBILE_STRUCTURE_FILE")" --dependent-file "$PREPARED_MOBILE_STRUCTURE_FILE"

if [ ! -s "$PREPARED_MOBILE_STRUCTURE_FILE" ]
then
	ftdmp-prepare-monomer --input "$MOBILE_STRUCTURE_FILE" --output "$PREPARED_MOBILE_STRUCTURE_FILE" \
	  --restrict-input "$MOBILE_STRUCTURE_SELECTION" --rename-chain "$MOBILE_STRUCTURE_CHAIN" \
	  --randomize --random-seed 2 --forcefield "$OPENMM_FORCEFIELD" --conda-path "$CONDA_PATH" --conda-env "$CONDA_ENV"
fi

if [ ! -s "$PREPARED_MOBILE_STRUCTURE_FILE" ]
then
	echo >&2 "Error: failed to prepare mobile monomer structure"
	exit 1
fi

################################################################################

DOCKING_RESULTS_FILE="${OUTPUT_PATH}/docking_results.txt"

{
cat "$PREPARED_STATIC_STRUCTURE_FILE"
cat "$PREPARED_MOBILE_STRUCTURE_FILE"
echo "$FTDOCK_KEEP"
echo "$FTDOCK_ANGLE_STEP"
echo "$MIN_GRID_SEP"
} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$DOCKING_RESULTS_FILE")" --dependent-file "$DOCKING_RESULTS_FILE"

if [ ! -s "$DOCKING_RESULTS_FILE" ]
then
	ftdmp-dock-two-monomers --monomer1 "$PREPARED_STATIC_STRUCTURE_FILE" --monomer2 "$PREPARED_MOBILE_STRUCTURE_FILE" \
	  --job-name "${JOB_NAME}_" \
	  --parallel "$DOCKING_PROCESSORS" --sbatch-parameters "$DOCKING_SBATCH" \
	  --ftdock-keep "$FTDOCK_KEEP" \
	  --ftdock-angle-step "$FTDOCK_ANGLE_STEP" \
	  --min-grid-sep "$MIN_GRID_SEP" \
	> "$DOCKING_RESULTS_FILE"
fi

PREV_SCORING_RESULTS_FILE="$DOCKING_RESULTS_FILE"
HEAD_LINES_TO_KEEP=9999999

################################################################################

if [ -n "$REFERENCE_STRUCTURE_FILE_FOR_COMPARISON" ]
then
	NEXT_SCORING_RESULTS_FILE="${OUTPUT_PATH}/scoring_results_FICS.txt"
	
	{
	cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP"
	cat "$PREPARED_STATIC_STRUCTURE_FILE"
	cat "$PREPARED_MOBILE_STRUCTURE_FILE"
	echo "$FTDOCK_KEEP"
	echo "$FTDOCK_ANGLE_STEP"
	echo "$MIN_GRID_SEP"
	} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$NEXT_SCORING_RESULTS_FILE")" --dependent-file "$NEXT_SCORING_RESULTS_FILE"
	
	if [ ! -s "$NEXT_SCORING_RESULTS_FILE" ]
	then
		cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP" \
		| ftdmp-calc-interface-cadscore-for-reference --monomer1 "$PREPARED_STATIC_STRUCTURE_FILE" --monomer2 "$PREPARED_MOBILE_STRUCTURE_FILE" \
		  --reference "$REFERENCE_STRUCTURE_FILE_FOR_COMPARISON" \
		  --subselect-contacts "$INTERFACE_SUBSELECTION" \
		  --parallel "$SCORING_PROCESSORS" --sbatch-parameters "$SCORING_SBATCH" \
		  --colnames-prefix FICS_ \
		  --adjoin \
		| ftdmp-sort-table --columns "FICS_iface_cadscore" \
		> "$NEXT_SCORING_RESULTS_FILE"
	fi
	
	PREV_SCORING_RESULTS_FILE="$NEXT_SCORING_RESULTS_FILE"
fi

################################################################################

if [ "$SCORING_MODE_PROTEIN" == "true" ]
then
	NEXT_SCORING_RESULTS_FILE="${OUTPUT_PATH}/scoring_results_FIV.txt"
	
	{
	cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP"
	cat "$PREPARED_STATIC_STRUCTURE_FILE"
	cat "$PREPARED_MOBILE_STRUCTURE_FILE"
	echo "$INTERFACE_SUBSELECTION"
	echo "$SCORE_SYMMETRY"
	} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$NEXT_SCORING_RESULTS_FILE")" --dependent-file "$NEXT_SCORING_RESULTS_FILE"
	
	if [ ! -s "$NEXT_SCORING_RESULTS_FILE" ]
	then
		cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP" \
		| ftdmp-calc-interface-voromqa-scores --monomer1 "$PREPARED_STATIC_STRUCTURE_FILE" --monomer2 "$PREPARED_MOBILE_STRUCTURE_FILE" \
		  --subselect-contacts "$INTERFACE_SUBSELECTION" \
		  --parallel "$SCORING_PROCESSORS" --sbatch-parameters "$SCORING_SBATCH" \
		  --score-symmetry "$SCORE_SYMMETRY" \
		  --colnames-prefix FIV_ \
		  --adjoin \
		| ftdmp-sort-table --columns "-FIV_iface_energy" \
		> "$NEXT_SCORING_RESULTS_FILE"
	fi
	
	PREV_SCORING_RESULTS_FILE="$NEXT_SCORING_RESULTS_FILE"
	HEAD_LINES_TO_KEEP="$((SCORING_TOP_STAGE1+1))"
fi

################################################################################

if [ "$SCORING_MODE_GENERIC" == "true" ]
then
	NEXT_SCORING_RESULTS_FILE="${OUTPUT_PATH}/scoring_results_FIVb.txt"
	
	{
	cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP"
	cat "$PREPARED_STATIC_STRUCTURE_FILE"
	cat "$PREPARED_MOBILE_STRUCTURE_FILE"
	echo "$INTERFACE_SUBSELECTION"
	echo "$SCORE_SYMMETRY"
	} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$NEXT_SCORING_RESULTS_FILE")" --dependent-file "$NEXT_SCORING_RESULTS_FILE"
	
	if [ ! -s "$NEXT_SCORING_RESULTS_FILE" ]
	then
		cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP" \
		| ftdmp-calc-interface-voromqa-scores --monomer1 "$PREPARED_STATIC_STRUCTURE_FILE" --monomer2 "$PREPARED_MOBILE_STRUCTURE_FILE" \
		  --subselect-contacts "$INTERFACE_SUBSELECTION" \
		  --parallel "$SCORING_PROCESSORS" --sbatch-parameters "$SCORING_SBATCH" \
		  --blanket \
		  --score-symmetry "$SCORE_SYMMETRY" \
		  --colnames-prefix FIVb_ \
		  --adjoin \
		| ftdmp-sort-table --columns "-FIVb_iface_energy" \
		> "$NEXT_SCORING_RESULTS_FILE"
	fi
	
	PREV_SCORING_RESULTS_FILE="$NEXT_SCORING_RESULTS_FILE"
	HEAD_LINES_TO_KEEP="$((SCORING_TOP_STAGE1+1))"
fi

################################################################################

if [ "$SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT" == "true" ]
then
	NEXT_SCORING_RESULTS_FILE="${OUTPUT_PATH}/scoring_results_FIV_sr.txt"
	
	{
	cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP"
	cat "$PREPARED_STATIC_STRUCTURE_FILE"
	cat "$PREPARED_MOBILE_STRUCTURE_FILE"
	echo "$INTERFACE_SUBSELECTION"
	} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$NEXT_SCORING_RESULTS_FILE")" --dependent-file "$NEXT_SCORING_RESULTS_FILE"
	
	if [ ! -s "$NEXT_SCORING_RESULTS_FILE" ]
	then
		cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP" \
		| ftdmp-calc-interface-voromqa-scores --monomer1 "$PREPARED_STATIC_STRUCTURE_FILE" --monomer2 "$PREPARED_MOBILE_STRUCTURE_FILE" \
		  --subselect-contacts "$INTERFACE_SUBSELECTION" \
		  --parallel "$SCORING_PROCESSORS" --sbatch-parameters "$SCORING_SBATCH" \
		  --rebuild-sidechains \
		  --colnames-prefix FIV_sr_ \
		  --adjoin \
		| ftdmp-sort-table --columns "-FIV_sr_iface_energy" \
		> "$NEXT_SCORING_RESULTS_FILE"
	fi
	
	PREV_SCORING_RESULTS_FILE="$NEXT_SCORING_RESULTS_FILE"
	HEAD_LINES_TO_KEEP="$((SCORING_TOP_STAGE1+1))"
fi

################################################################################

if [ "$SCORING_MODE_GENERIC_SIDECHAIN_REBUILT" == "true" ]
then
	NEXT_SCORING_RESULTS_FILE="${OUTPUT_PATH}/scoring_results_FIVb_sr.txt"

	{
	cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP"
	cat "$PREPARED_STATIC_STRUCTURE_FILE"
	cat "$PREPARED_MOBILE_STRUCTURE_FILE"
	echo "$INTERFACE_SUBSELECTION"
	} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$NEXT_SCORING_RESULTS_FILE")" --dependent-file "$NEXT_SCORING_RESULTS_FILE"
	
	if [ ! -s "$NEXT_SCORING_RESULTS_FILE" ]
	then
		cat "$PREV_SCORING_RESULTS_FILE" | head -n "$HEAD_LINES_TO_KEEP" \
		| ftdmp-calc-interface-voromqa-scores --monomer1 "$PREPARED_STATIC_STRUCTURE_FILE" --monomer2 "$PREPARED_MOBILE_STRUCTURE_FILE" \
		  --subselect-contacts "$INTERFACE_SUBSELECTION" \
		  --parallel "$SCORING_PROCESSORS" --sbatch-parameters "$SCORING_SBATCH" \
		  --blanket --rebuild-sidechains \
		  --colnames-prefix FIVb_sr_ \
		  --adjoin \
		| ftdmp-sort-table --columns "-FIVb_sr_iface_energy" \
		> "$NEXT_SCORING_RESULTS_FILE"
	fi
	
	PREV_SCORING_RESULTS_FILE="$NEXT_SCORING_RESULTS_FILE"
	HEAD_LINES_TO_KEEP="$((SCORING_TOP_STAGE1+1))"
fi

################################################################################

NEXT_SCORING_RESULTS_FILE="${OUTPUT_PATH}/scoring_results.txt"

{
cat "$PREV_SCORING_RESULTS_FILE"
echo "$SCORING_MODE_PROTEIN"
echo "$SCORING_MODE_GENERIC"
echo "$SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT"
echo "$SCORING_MODE_GENERIC_SIDECHAIN_REBUILT"
} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$NEXT_SCORING_RESULTS_FILE")" --dependent-file "$NEXT_SCORING_RESULTS_FILE"

if [ ! -s "$NEXT_SCORING_RESULTS_FILE" ]
then
	cat "$PREV_SCORING_RESULTS_FILE" \
	| {
		if [ "$SCORING_MODE_PROTEIN" == "true" ]
		then
			ftdmp-sort-table \
			  --columns "-FIV_iface_energy" \
			  --add-rank-column "FIV_iface_energy_rank" \
			| ftdmp-sort-table \
			  --columns "-FIV_iface_energy_norm" \
			  --add-rank-column "FIV_iface_energy_norm_rank" \
			| ftdmp-sort-table \
			  --columns "-FIV_iface_energy -FIV_iface_clash_score" \
			  --tolerances "0 0.05" \
			  --add-rank-column "FIV_energy_clash_tour_rank" \
			| ftdmp-sort-table \
			  --columns "-FIV_iface_energy -FIV_iface_energy_norm -FIV_iface_clash_score" \
			  --tolerances "0 0 0.05" \
			  --add-rank-column "FIV_energy_norm_clash_tour_rank"
		else
			cat
		fi
	} \
	| {
		if [ "$SCORING_MODE_GENERIC" == "true" ]
		then
			ftdmp-sort-table \
			  --columns "-FIVb_iface_energy" \
			  --add-rank-column "FIVb_iface_energy_rank" \
			| ftdmp-sort-table \
			  --columns "-FIVb_iface_energy_norm" \
			  --add-rank-column "FIVb_iface_energy_norm_rank" \
			| ftdmp-sort-table \
			  --columns "-FIVb_iface_energy -FIVb_iface_clash_score" \
			  --tolerances "0 0.05" \
			  --add-rank-column "FIVb_energy_clash_tour_rank" \
			| ftdmp-sort-table \
			  --columns "-FIVb_iface_energy -FIVb_iface_energy_norm -FIVb_iface_clash_score" \
			  --tolerances "0 0 0.05" \
			  --add-rank-column "FIVb_energy_norm_clash_tour_rank"
		else
			cat
		fi
	} \
	| {
		if [ "$SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT" == "true" ]
		then
			ftdmp-sort-table \
			  --columns "-FIV_sr_iface_energy" \
			  --add-rank-column "FIV_sr_iface_energy_rank" \
			| ftdmp-sort-table \
			  --columns "-FIV_sr_iface_energy_norm" \
			  --add-rank-column "FIV_sr_iface_energy_norm_rank" \
			| ftdmp-sort-table \
			  --columns "-FIV_sr_iface_energy -FIV_sr_iface_clash_score" \
			  --tolerances "0 0.05" \
			  --add-rank-column "FIV_sr_energy_clash_tour_rank" \
			| ftdmp-sort-table \
			  --columns "-FIV_sr_iface_energy -FIV_sr_iface_energy_norm -FIV_sr_iface_clash_score" \
			  --tolerances "0 0 0.05" \
			  --add-rank-column "FIV_sr_energy_norm_clash_tour_rank"
		else
			cat
		fi
	} \
	| {
		if [ "$SCORING_MODE_GENERIC_SIDECHAIN_REBUILT" == "true" ]
		then
			ftdmp-sort-table \
			  --columns "-FIVb_sr_iface_energy" \
			  --add-rank-column "FIVb_sr_iface_energy_rank" \
			| ftdmp-sort-table \
			  --columns "-FIVb_sr_iface_energy_norm" \
			  --add-rank-column "FIVb_sr_iface_energy_norm_rank" \
			| ftdmp-sort-table \
			  --columns "-FIVb_sr_iface_energy -FIVb_sr_iface_clash_score" \
			  --tolerances "0 0.05" \
			  --add-rank-column "FIVb_sr_energy_clash_tour_rank" \
			| ftdmp-sort-table \
			  --columns "-FIVb_sr_iface_energy -FIVb_sr_iface_energy_norm -FIVb_sr_iface_clash_score" \
			  --tolerances "0 0 0.05" \
			  --add-rank-column "FIVb_sr_energy_norm_clash_tour_rank"
		else
			cat
		fi
	} \
	> "$NEXT_SCORING_RESULTS_FILE"
fi

PREV_SCORING_RESULTS_FILE="$NEXT_SCORING_RESULTS_FILE"

################################################################################

NEXT_SCORING_RESULTS_FILE="${OUTPUT_PATH}/top_scoring_results_unordered.txt"

cat "$PREV_SCORING_RESULTS_FILE" \
| ftdmp-filter-table \
  "<=${SCORING_TOP_STAGE2}" $SCORING_RANKS \
> "$NEXT_SCORING_RESULTS_FILE"

PREV_SCORING_RESULTS_FILE="$NEXT_SCORING_RESULTS_FILE"

################################################################################

SIMILARITY_MATRIX_FILE="${OUTPUT_PATH}/similarity_matrix.txt"

{
cat "$PREV_SCORING_RESULTS_FILE"
cat "$PREPARED_STATIC_STRUCTURE_FILE"
cat "$PREPARED_MOBILE_STRUCTURE_FILE"
echo "$INTERFACE_SUBSELECTION"
echo "$REMAP_CADSCORE"
} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$SIMILARITY_MATRIX_FILE")" --dependent-file "$SIMILARITY_MATRIX_FILE"

if [ ! -s "$SIMILARITY_MATRIX_FILE" ]
then
	cat "$PREV_SCORING_RESULTS_FILE" \
	| ftdmp-calc-interface-cadscore-matrix --monomer1 "$PREPARED_STATIC_STRUCTURE_FILE" --monomer2 "$PREPARED_MOBILE_STRUCTURE_FILE" \
	  --subselect-contacts "$INTERFACE_SUBSELECTION" \
	  --remap-chains "$REMAP_CADSCORE" \
	  --matrix-output "$SIMILARITY_MATRIX_FILE" \
	  --parallel "$SCORING_PROCESSORS" --sbatch-parameters "$SCORING_SBATCH" \
	> /dev/null
fi

################################################################################

NEXT_SCORING_RESULTS_FILE="${OUTPUT_PATH}/top_scoring_results.txt"

cat "$PREV_SCORING_RESULTS_FILE" \
| ftdmp-calc-ranks-jury-scores \
  --similarities "$SIMILARITY_MATRIX_FILE" \
  --rank-columns "$SCORING_RANKS" \
  --top-slices "$SCORING_RANKS_JURY_SLICES" \
  --cluster 0.9 \
  --several-max-values 5 \
  --colnames-prefix RJS_ \
  --adjoin \
| ftdmp-sort-table \
  --columns "-RJS_rank" \
| ftdmp-calc-redundancy-scores \
  --similarities "$SIMILARITY_MATRIX_FILE" \
  --colnames-prefix RDDS_ \
  --adjoin \
| ftdmp-sort-table \
  --columns "-RJS_rank" \
| ftdmp-filter-table \
  "<=${REDUNDANCY_THRESHOLD}" RDDS_ordered_score \
| ftdmp-sort-table \
  --columns "-RJS_rank" \
| column -t \
> "$NEXT_SCORING_RESULTS_FILE"

rm "$PREV_SCORING_RESULTS_FILE"

PREV_SCORING_RESULTS_FILE="$NEXT_SCORING_RESULTS_FILE"

################################################################################

if [ "$NUMBER_OF_COMPLEXES_TO_BUILD" -gt "0" ]
then
	TOP_COMPLEXES_DIR="${OUTPUT_PATH}/top_complexes"
	
	{
	cat "$PREV_SCORING_RESULTS_FILE"
	cat "$PREPARED_STATIC_STRUCTURE_FILE"
	cat "$PREPARED_MOBILE_STRUCTURE_FILE"
	echo "$NUMBER_OF_COMPLEXES_TO_BUILD"
	} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$TOP_COMPLEXES_DIR")" --dependent-file "$TOP_COMPLEXES_DIR"
	
	if [ ! -d "$TOP_COMPLEXES_DIR" ]
	then
		cat "$PREV_SCORING_RESULTS_FILE" \
		| head -n "$((NUMBER_OF_COMPLEXES_TO_BUILD+1))" \
		| ftdmp-build-complex --monomer1 "$PREPARED_STATIC_STRUCTURE_FILE" --monomer2 "$PREPARED_MOBILE_STRUCTURE_FILE" \
		  --output-prefix "${TOP_COMPLEXES_DIR}/" \
		  --output-suffix ".pdb" \
		| tail -n +2 \
		| awk -v prefix="${TOP_COMPLEXES_DIR}/" -v suffix=".pdb" '{printf("%s%s%s %s%09d_%s%s\n", prefix, $1, suffix, prefix, NR, $1, suffix)}' \
		| xargs -L 1 mv
	fi
fi

