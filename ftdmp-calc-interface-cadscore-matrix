#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'ftdmp-calc-interface-cadscore-matrix' computes similarity matrix for docking results produced by 'ftdmp-dock'

Options:
    --matrix-output           string  *  matrix output file path
    --input-prefix            string     input file path prefix
    --input-suffix            string     input file path suffix, default is '.pdb'
    --monomer1                string     static monomer input file path
    --monomer2                string     mobile monomer input file path
    --subselect-contacts      string     query to subselect inter-chain contacts, default is '[]'
    --remap-chains            string     flag to calculate and use optimal chains remapping, default is 'false'
    --crude                   string     flag to use faster but crude mode
    --parallel                number     total number of parallel parts, default is 1
    --sbatch-parameters       string     sbatch parameters to run in parallel, default is ''
    --help | -h                          flag to display help message and exit

Standard input:
    space-separated table of docking results

Standard output:
    space-separated table of docking results
    
Example:

    cat docking_results_table.txt | ftdmp-calc-interface-cadscore-matrix --monomer1 monomer1.pdb --monomer2 monomer2.pdb --parallel 16

EOF
exit 1
}

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [ -z "$FTDMPDIR" ]
then
	export FTDMPDIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
	export PATH="${FTDMPDIR}/core/voronota-js_release:${FTDMPDIR}:${PATH}"
fi

command -v voronota-js-fast-iface-cadscore-matrix &> /dev/null || { echo >&2 "Error: 'voronota-js-fast-iface-cadscore-matrix' executable not in binaries path"; exit 1; }

MATRIX_OUTPUT=""
INPUT_PREFIX=""
INPUT_SUFFIX=".pdb"
MONOMERFILE1=""
MONOMERFILE2=""
SUBSELECT_CONTACTS="[]"
PARALLEL_PARTS="1"
SBATCH_PARAMETERS=""
USE_MONOMERS="false"
REMAP_CHAINS="false"
CRUDE_MODE="false"
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--matrix-output)
		MATRIX_OUTPUT="$OPTARG"
		shift
		;;
	--input-prefix)
		INPUT_PREFIX="$OPTARG"
		shift
		;;
	--input-suffix)
		INPUT_SUFFIX="$OPTARG"
		shift
		;;
	--monomer1)
		MONOMERFILE1="$OPTARG"
		USE_MONOMERS="true"
		shift
		;;
	--monomer2)
		MONOMERFILE2="$OPTARG"
		USE_MONOMERS="true"
		shift
		;;
	--subselect-contacts)
		SUBSELECT_CONTACTS="$OPTARG"
		shift
		;;
	--parallel)
		PARALLEL_PARTS="$OPTARG"
		shift
		;;
	--sbatch-parameters)
		SBATCH_PARAMETERS="$OPTARG"
		shift
		;;
	--remap-chains)
		REMAP_CHAINS="$OPTARG"
		shift
		;;
	--crude)
		CRUDE_MODE="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

if [ -z "$MATRIX_OUTPUT" ]
then
	echo >&2 "Error: matrix output file path not provided"
	exit 1
fi

if [ -z "$MONOMERFILE1" ] && [ -z "$MONOMERFILE2" ]
then
	USE_MONOMERS="false"
fi

if [ "$USE_MONOMERS" == "true" ]
then
	if [ -z "$MONOMERFILE1" ]
	then
		echo >&2 "Error: no static input file specified"
		exit 1
	fi
	
	if [ ! -s "$MONOMERFILE1" ]
	then
		echo >&2 "Error: no static input file '$MONOMERFILE1'"
		exit 1
	fi
	
	if [ -z "$MONOMERFILE2" ]
	then
		echo >&2 "Error: no mobile input file specified"
		exit 1
	fi
	
	if [ ! -s "$MONOMERFILE2" ]
	then
		echo >&2 "Error: no mobile input file '$MONOMERFILE2'"
		exit 1
	fi
fi

if [ -z "$PARALLEL_PARTS" ] || [ "$PARALLEL_PARTS" -ne "$PARALLEL_PARTS" ] || [ "$PARALLEL_PARTS" -lt "1" ]
then
	echo >&2 "Error: invalid number of parallel parts '$PARALLEL_PARTS', must be a positive number"
	exit 1
fi

MORE_FAST_IFACE_CADSCORE_PARAMETERS=()

MORE_FAST_IFACE_CADSCORE_PARAMETERS+=("--processors")
MORE_FAST_IFACE_CADSCORE_PARAMETERS+=("$PARALLEL_PARTS")
MORE_FAST_IFACE_CADSCORE_PARAMETERS+=("--subselect-contacts")
MORE_FAST_IFACE_CADSCORE_PARAMETERS+=("$SUBSELECT_CONTACTS")
MORE_FAST_IFACE_CADSCORE_PARAMETERS+=("--sbatch-parameters")
MORE_FAST_IFACE_CADSCORE_PARAMETERS+=("$SBATCH_PARAMETERS")

if [ "$REMAP_CHAINS" == "true" ]
then
	MORE_FAST_IFACE_CADSCORE_PARAMETERS+=("--remap-chains")
fi

if [ "$CRUDE_MODE" == "true" ]
then
	MORE_FAST_IFACE_CADSCORE_PARAMETERS+=("--crude")
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

cat > "${TMPLDIR}/input"

if [ ! -s "${TMPLDIR}/input" ]
then
	echo >&2 "Error: no input data in stdin"
	exit 1
fi

{
if [ "$USE_MONOMERS" == "true" ]
then
	mkdir -p "${TMPLDIR}/docklines"
	
	cd "${TMPLDIR}/docklines"
	
	cat ../input \
	| awk -v m1="$MONOMERFILE1" -v m2="$MONOMERFILE2" '{if($1!="ID"){print "import-docking-result -static-file \"" m1 "\" -mobile-file \"" m2 "\" -generic-transform " $3 " " $4 " " $5 " " $6 " " $7 " " $8 " " $9 " " $10 " " $11 " " $12 " " $13 " " $14 " " $15 > $1 ; close($1)}}'
	
	cd - &> /dev/null
	
	find "${TMPLDIR}/docklines" -type f -not -empty \
	| voronota-js-fast-iface-cadscore-matrix --model-input-is-script "${MORE_FAST_IFACE_CADSCORE_PARAMETERS[@]}"
else
	cat "${TMPLDIR}/input" \
	| awk -v prefix="$INPUT_PREFIX" -v suffix="$INPUT_SUFFIX" '{if($1!="ID"){print prefix $1 suffix}}' \
	| voronota-js-fast-iface-cadscore-matrix "${MORE_FAST_IFACE_CADSCORE_PARAMETERS[@]}" \
	| sed "s/^\(\S\+\)${INPUT_SUFFIX}\s\+\(\S\+\)${INPUT_SUFFIX} /\1 \2 /"
fi
} \
| tail -n +2 \
| awk '{print $1 " " $2 " " $3 " " $4}' \
> "${TMPLDIR}/output"

if [ ! -s "${TMPLDIR}/output" ]
then
	echo >&2 "Error: no output produced"
	exit 1
fi

mkdir -p "$(dirname "$MATRIX_OUTPUT")"
cat "${TMPLDIR}/output" | sort > "$MATRIX_OUTPUT"

cat "${TMPLDIR}/input"

