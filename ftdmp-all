#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'ftdmp-all' docks, scores and ranks complex structures of proteins or nucleic acids

Options:
    --job-name                string  *  job name
    --pre-docked-input-dir    string     pre-docked input directory path 
    --static-file             string     hetero docking static input file path
    --static-sel              string     hetero docking query to restrict static atoms, default is '[]'
    --static-chain            string     hetero docking chain name or chain renaming rule to apply for static atoms, default is ''
    --mobile-file             string     hetero or homo docking mobile input file path
    --mobile-sel              string     hetero or homo docking query to restrict mobile atoms, default is '[]'
    --mobile-chain            string     hetero or homo docking chain name or chain renaming rule to apply for mobile atoms, default is ''
    --symmetry-docking        string     homo docking symmetry to apply for the mobile input file, default is ''
    --subselect-contacts      string     query to subselect inter-chain contacts for scoring, default is '[]'
    --reference               string     input structure file to compute CAD-score with, default is ''
    --openmm-forcefield       string     forcefield name for OpenMM-based operations, default is ''
    --conda-path              string     conda installation path, default is ''
    --conda-env               string     conda environment name, default is ''
    --ftdock-keep             number     ftdock keep parameter, default is 1
    --ftdock-angle-step       number     ftdock angle step parameter, default is 9
    --min-grid-sep            number     minimum grid separation between same-rotation translations, default is 20
    --parallel-docking        number     number of processes to run when docking, default is 8
    --parallel-scoring        number     number of processes to run when scoring, default is 8
    --sbatch-docking          string     sbatch parameters to run docking in parallel, default is ''
    --sbatch-scoring          string     sbatch parameters to run scoring in parallel, default is ''
    --score-symmetry          string     flag to score symmetry, default is 'false'
    --remap-cadscore          string     flag to use optimal chains remapping for CAD-score, default is 'false'
    --scoring-full-top        number     number of top complexes to keep after full scoring stage, default is 1000
    --scoring-rank-names      string  *  rank names to use, or name of a standard set of rank names
    --scoring-ranks-top       number     number of top complexes to consider for each ranking, default is 100
    --scoring-jury-slices     string     slice sizes sequence definition for ranks jury scoring, default is '10 50'
    --scoring-jury-cluster    number     clustering threshold for ranks jury scoring, default is 0.9
    --scoring-jury-maxs       number     number of max values to use for ranks jury scoring, default is 5
    --redundancy-threshold    number     minimal ordered redundancy value to accept, default is 1
    --build-complexes         number     number of top complexes to build, default is 0
    --multiply-chains         string     options to multiply chains, default is ''
    --relax-complexes         string     options to relax complexes, default is ''
    --only-dock-and-score     string     flag to only dock, score and quit after scoring
    --diversify               number     step of CAD-score to diversify scoring results and exit, default is ''
    --output-dir              string  *  output directory path
    --help | -h                          flag to display help message and exit

Examples:

    ftdmp-all --job-name 'j1' --static-file './chainA.pdb' --mobile-file './chainB.pdb' \
      --scoring-rank-names 'standard_for_protein_protein' --output-dir './results'

    ftdmp-all --job-name 'j2' --pre-docked-input-dir './predocked' \
      --scoring-rank-names 'standard_for_protein_protein' --output-dir './results'

EOF
exit 1
}

################################################################################

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [ -z "$FTDMPDIR" ]
then
	export FTDMPDIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
	export PATH="${FTDMPDIR}/core/voronota-js_release:${FTDMPDIR}/core/3D_Dock/progs:${FTDMPDIR}:${PATH}"
fi

JOB_NAME=""
PRE_DOCKED_INPUT_DIR=""
STATIC_STRUCTURE_FILE=""
STATIC_STRUCTURE_SELECTION="[]"
STATIC_STRUCTURE_CHAIN=""
MOBILE_STRUCTURE_FILE=""
MOBILE_STRUCTURE_SELECTION="[]"
MOBILE_STRUCTURE_CHAIN=""
SYMMETRY_DOCKING=""
INTERFACE_SUBSELECTION="[]"
REFERENCE_STRUCTURE_FILE_FOR_COMPARISON=""
OPENMM_FORCEFIELD=""
CONDA_PATH=""
CONDA_ENV=""
FTDOCK_KEEP="1"
FTDOCK_ANGLE_STEP="9"
MIN_GRID_SEP="20"
DOCKING_PROCESSORS="8"
SCORING_PROCESSORS="8"
DOCKING_SBATCH=""
SCORING_SBATCH=""
SCORE_SYMMETRY="false"
REMAP_CADSCORE="false"
SCORING_TOP_STAGE1="1000"
SCORING_RANKS=""
SCORING_TOP_STAGE2="100"
SCORING_RANKS_JURY_SLICES="10 50" 
SCORING_RANKS_JURY_CLUSTER="0.9" 
SCORING_RANKS_JURY_MAX_VALUES="5" 
NUMBER_OF_COMPLEXES_TO_BUILD="0"
REDUNDANCY_THRESHOLD="1"
MULTIPLY_CHAINS=""
RELAX_COMPLEXES=""
ONLY_DOCK_AND_SCORE="false"
DIVERSIFY=""
OUTPUT_PATH=""
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--job-name)
		JOB_NAME="$OPTARG"
		shift
		;;
	--pre-docked-input-dir)
		PRE_DOCKED_INPUT_DIR="$OPTARG"
		shift
		;;
	--static-file)
		STATIC_STRUCTURE_FILE="$OPTARG"
		shift
		;;
	--static-sel)
		STATIC_STRUCTURE_SELECTION="$OPTARG"
		shift
		;;
	--static-chain)
		STATIC_STRUCTURE_CHAIN="$OPTARG"
		shift
		;;
	--mobile-file)
		MOBILE_STRUCTURE_FILE="$OPTARG"
		shift
		;;
	--mobile-sel)
		MOBILE_STRUCTURE_SELECTION="$OPTARG"
		shift
		;;
	--mobile-chain)
		MOBILE_STRUCTURE_CHAIN="$OPTARG"
		shift
		;;
	--symmetry-docking)
		SYMMETRY_DOCKING="$OPTARG"
		shift
		;;
	--subselect-contacts)
		INTERFACE_SUBSELECTION="$OPTARG"
		shift
		;;
	--reference)
		REFERENCE_STRUCTURE_FILE_FOR_COMPARISON="$OPTARG"
		shift
		;;
	--openmm-forcefield)
		OPENMM_FORCEFIELD="$OPTARG"
		shift
		;;
	--conda-path)
		CONDA_PATH="$OPTARG"
		shift
		;;
	--conda-env)
		CONDA_ENV="$OPTARG"
		shift
		;;
	--ftdock-keep)
		FTDOCK_KEEP="$OPTARG"
		shift
		;;
	--ftdock-angle-step)
		FTDOCK_ANGLE_STEP="$OPTARG"
		shift
		;;
	--min-grid-sep)
		MIN_GRID_SEP="$OPTARG"
		shift
		;;
	--parallel-docking)
		DOCKING_PROCESSORS="$OPTARG"
		shift
		;;
	--parallel-scoring)
		SCORING_PROCESSORS="$OPTARG"
		shift
		;;
	--sbatch-docking)
		DOCKING_SBATCH="$OPTARG"
		shift
		;;
	--sbatch-scoring)
		SCORING_SBATCH="$OPTARG"
		shift
		;;
	--score-symmetry)
		SCORE_SYMMETRY="$OPTARG"
		shift
		;;
	--remap-cadscore)
		REMAP_CADSCORE="$OPTARG"
		shift
		;;
	--scoring-full-top)
		SCORING_TOP_STAGE1="$OPTARG"
		shift
		;;
	--scoring-rank-names)
		SCORING_RANKS="$OPTARG"
		shift
		;;
	--scoring-ranks-top)
		SCORING_TOP_STAGE2="$OPTARG"
		shift
		;;
	--scoring-jury-slices)
		SCORING_RANKS_JURY_SLICES="$OPTARG"
		shift
		;;
	--scoring-jury-cluster)
		SCORING_RANKS_JURY_CLUSTER="$OPTARG"
		shift
		;;
	--scoring-jury-maxs)
		SCORING_RANKS_JURY_MAX_VALUES="$OPTARG"
		shift
		;;
	--build-complexes)
		NUMBER_OF_COMPLEXES_TO_BUILD="$OPTARG"
		shift
		;;
	--redundancy-threshold)
		REDUNDANCY_THRESHOLD="$OPTARG"
		shift
		;;
	--multiply-chains)
		MULTIPLY_CHAINS="$OPTARG"
		shift
		;;
	--relax-complexes)
		RELAX_COMPLEXES="$OPTARG"
		shift
		;;
	--only-dock-and-score)
		ONLY_DOCK_AND_SCORE="$OPTARG"
		shift
		;;
	--diversify)
		DIVERSIFY="$OPTARG"
		shift
		;;
	--output-dir)
		OUTPUT_PATH="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

[ -n "$JOB_NAME" ] || { echo >&2 "Error: job name not provided"; exit 1;}

DOCKING_REGIME=""

if [ -n "$PRE_DOCKED_INPUT_DIR" ]
then
	[ -d "$PRE_DOCKED_INPUT_DIR" ] || { echo >&2 "Error: invalid pre-docked files input directory '$PRE_DOCKED_INPUT_DIR'"; exit 1;}
	[ "$(find $PRE_DOCKED_INPUT_DIR -type f -not -empty | wc -l)" -gt "1" ] || { echo >&2 "Error: pre-docked files input directory '$PRE_DOCKED_INPUT_DIR' does not contain more than 1 file"; exit 1;}
	
	[ -z "$SYMMETRY_DOCKING" ] || { echo >&2 "Error: docking symmetry provided in pre-docked mode"; exit 1;}
	
	[ -z "$STATIC_STRUCTURE_FILE" ] || { echo >&2 "Error: static structure file provided in pre-docked mode"; exit 1;}
	
	[ -z "$MOBILE_STRUCTURE_FILE" ] || { echo >&2 "Error: mobile structure file not provided in pre-docked mode"; exit 1;}
	
	DOCKING_REGIME="pre-docked"
else
	if [ -n "$SYMMETRY_DOCKING" ]
	then
		[ -z "$STATIC_STRUCTURE_FILE" ] || { echo >&2 "Error: static structure file provided in homo docking mode"; exit 1;}
		
		[ -n "$MOBILE_STRUCTURE_FILE" ] || { echo >&2 "Error: mobile structure file not provided in homo docking mode"; exit 1;}
		[ -s "$MOBILE_STRUCTURE_FILE" ] || { echo >&2 "Error: mobile structure file non-existing or empty in homo docking mode"; exit 1;}
		[ -n "$MOBILE_STRUCTURE_SELECTION" ] || { echo >&2 "Error: mobile structure selection not defined in homo docking mode"; exit 1;}
		
		DOCKING_REGIME="homo"
	else
		[ -n "$STATIC_STRUCTURE_FILE" ] || { echo >&2 "Error: static structure file not provided in hetero docking mode"; exit 1;}
		[ -s "$STATIC_STRUCTURE_FILE" ] || { echo >&2 "Error: static structure file non-existing or empty in hetero docking mode"; exit 1;}
		[ -n "$STATIC_STRUCTURE_SELECTION" ] || { echo >&2 "Error: static structure selection not defined in hetero docking mode"; exit 1;}
		
		[ -n "$MOBILE_STRUCTURE_FILE" ] || { echo >&2 "Error: mobile structure file not provided in hetero docking mode"; exit 1;}
		[ -s "$MOBILE_STRUCTURE_FILE" ] || { echo >&2 "Error: mobile structure file non-existing or empty in hetero docking mode"; exit 1;}
		[ -n "$MOBILE_STRUCTURE_SELECTION" ] || { echo >&2 "Error: mobile structure selection not defined in hetero docking mode"; exit 1;}
		
		DOCKING_REGIME="hetero"
	fi
fi

[ -n "$INTERFACE_SUBSELECTION" ] || { echo >&2 "Error: contacts subselection not defined"; exit 1; }

[ -n "$SCORING_RANKS" ] || { echo >&2 "Error: scoring rank names not provided"; exit 1;}

[ -n "$SCORING_RANKS_JURY_SLICES" ] || { echo >&2 "Error: scoring ranks jury slices not defined"; exit 1;}

[ -n "$OUTPUT_PATH" ] || { echo >&2 "Error: output path not provided"; exit 1;}

################################################################################

if [ "$SCORING_RANKS" == "simple_for_protein_protein" ]
then
	SCORING_RANKS="raw_FIV_iface_energy_rank  raw_FIV_energy_clash_tour_rank"
fi

if [ "$SCORING_RANKS" == "standard_for_protein_protein" ]
then
	SCORING_RANKS="raw_FIV_iface_energy_rank  raw_FIV_energy_clash_tour_rank  raw_FIV_sr_iface_energy_rank  raw_FIV_sr_energy_clash_tour_rank  raw_FIVb_iface_energy_rank  raw_FIVb_energy_clash_tour_rank  raw_FIVb_sr_iface_energy_rank  raw_FIVb_sr_energy_clash_tour_rank"
fi

if [ "$SCORING_RANKS" == "standard_for_generic" ]
then
	SCORING_RANKS="raw_FIVb_iface_energy_rank  raw_FIVb_energy_clash_tour_rank"
fi

SCORING_MODE_PROTEIN="false"
SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT="false"
SCORING_MODE_GENERIC="false"
SCORING_MODE_GENERIC_SIDECHAIN_REBUILT="false"

if [[ "$SCORING_RANKS" == *"_FIV_"* ]]
then
	SCORING_MODE_PROTEIN="true"
fi

if [[ "$SCORING_RANKS" == *"_FIV_sr_"* ]]
then
	SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT="true"
fi

if [[ "$SCORING_RANKS" == *"_FIVb_"* ]]
then
	SCORING_MODE_GENERIC="true"
fi

if [[ "$SCORING_RANKS" == *"_FIVb_sr_"* ]]
then
	SCORING_MODE_GENERIC_SIDECHAIN_REBUILT="true"
fi

if [ -z "$REFERENCE_STRUCTURE_FILE_FOR_COMPARISON" ] && [ "$SCORING_MODE_PROTEIN" != "true" ] && [ "$SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT" != "true" ] && [ "$SCORING_MODE_GENERIC" != "true" ] && [ "$SCORING_MODE_GENERIC_SIDECHAIN_REBUILT" != "true" ]
then
	echo >&2 "Error: no scoring action enabled"
	exit 1
fi

################################################################################

PREPARED_STATIC_STRUCTURE_FILE=""
PREPARED_MOBILE_STRUCTURE_FILE=""
INPUT_COMPLEX_PREFIX=""
INPUT_COMPLEX_SUFFIX=""

if [ "$DOCKING_REGIME" == "hetero" ]
then
	ftdmp-all-dock \
	  --job-name                "$JOB_NAME" \
	  --static-file             "$STATIC_STRUCTURE_FILE" \
	  --static-sel              "$STATIC_STRUCTURE_SELECTION" \
	  --static-chain            "$STATIC_STRUCTURE_CHAIN" \
	  --mobile-file             "$MOBILE_STRUCTURE_FILE" \
	  --mobile-sel              "$MOBILE_STRUCTURE_SELECTION" \
	  --mobile-chain            "$MOBILE_STRUCTURE_CHAIN" \
	  --openmm-forcefield       "$OPENMM_FORCEFIELD" \
	  --conda-path              "$CONDA_PATH" \
	  --conda-env               "$CONDA_ENV" \
	  --ftdock-keep             "$FTDOCK_KEEP" \
	  --ftdock-angle-step       "$FTDOCK_ANGLE_STEP" \
	  --min-grid-sep            "$MIN_GRID_SEP" \
	  --parallel                "$DOCKING_PROCESSORS" \
	  --sbatch                  "$DOCKING_SBATCH" \
	  --output-dir              "$OUTPUT_PATH"

	PREPARED_STATIC_STRUCTURE_FILE="${OUTPUT_PATH}/monomer_static.pdb"
	PREPARED_MOBILE_STRUCTURE_FILE="${OUTPUT_PATH}/monomer_mobile.pdb"
fi

if [ "$DOCKING_REGIME" == "homo" ]
then
	ftdmp-all-dock \
	  --job-name                "$JOB_NAME" \
	  --mobile-file             "$MOBILE_STRUCTURE_FILE" \
	  --mobile-sel              "$MOBILE_STRUCTURE_SELECTION" \
	  --mobile-chain            "$MOBILE_STRUCTURE_CHAIN" \
	  --symmetry-docking        "$SYMMETRY_DOCKING" \
	  --openmm-forcefield       "$OPENMM_FORCEFIELD" \
	  --conda-path              "$CONDA_PATH" \
	  --conda-env               "$CONDA_ENV" \
	  --output-dir              "$OUTPUT_PATH"
	
	INPUT_COMPLEX_PREFIX="${OUTPUT_PATH}/${JOB_NAME}/homo_complexes/"
	INPUT_COMPLEX_SUFFIX=".pdb"
fi

if [ "$DOCKING_REGIME" == "pre-docked" ]
then
	mkdir -p "${OUTPUT_PATH}/${JOB_NAME}"
	
	{
		echo "ID"
		find "$PRE_DOCKED_INPUT_DIR" -type f -name '*.pdb' -not -empty \
		| sed "s|^${PRE_DOCKED_INPUT_DIR}||" \
		| sed 's|\.pdb$||'
	} \
	> "${OUTPUT_PATH}/${JOB_NAME}/docking_results.txt"
	
	INPUT_COMPLEX_PREFIX="${PRE_DOCKED_INPUT_DIR}"
	INPUT_COMPLEX_SUFFIX=".pdb"
fi

OUTPUT_PATH="${OUTPUT_PATH}/${JOB_NAME}"

PREV_SCORING_RESULTS_FILE="${OUTPUT_PATH}/docking_results.txt"

if [ ! -s "$PREV_SCORING_RESULTS_FILE" ]
then
	echo >&2 "Error: no docking results"
	exit 1
fi

################################################################################

ftdmp-all-score \
  --input-from-table        "$PREV_SCORING_RESULTS_FILE" \
  --structure-monomer1      "$PREPARED_STATIC_STRUCTURE_FILE" \
  --structure-monomer2      "$PREPARED_MOBILE_STRUCTURE_FILE" \
  --structure-prefix        "$INPUT_COMPLEX_PREFIX" \
  --structure-suffix        "$INPUT_COMPLEX_SUFFIX" \
  --subselect-contacts      "$INTERFACE_SUBSELECTION" \
  --reference               "$REFERENCE_STRUCTURE_FILE_FOR_COMPARISON" \
  --remap-cadscore          "$REMAP_CADSCORE" \
  --mode-protein            "$SCORING_MODE_PROTEIN" \
  --mode-protein-sr         "$SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT" \
  --mode-generic            "$SCORING_MODE_GENERIC" \
  --mode-generic-sr         "$SCORING_MODE_GENERIC_SIDECHAIN_REBUILT"  \
  --score-symmetry          "$SCORE_SYMMETRY" \
  --keep-top                "$SCORING_TOP_STAGE1" \
  --clash-tour-tolerance    "0.05" \
  --parallel                "$SCORING_PROCESSORS" \
  --sbatch                  "$SCORING_SBATCH" \
  --output-names-prefix     "raw_" \
  --output-dir              "$OUTPUT_PATH"

PREV_SCORING_RESULTS_FILE="${OUTPUT_PATH}/raw_scoring_results.txt"

if [ ! -s "$PREV_SCORING_RESULTS_FILE" ]
then
	echo >&2 "Error: no raw scoring results"
	exit 1
fi

################################################################################

if [ "$ONLY_DOCK_AND_SCORE" == "true" ]
then
	exit 0
fi

################################################################################

if [ -n "$DIVERSIFY" ]
then
	ftdmp-all-diversify \
	  --input-scoring-table   "$PREV_SCORING_RESULTS_FILE" \
	  --names-prefix          "raw_" \
	  --cadscore-step         "$DIVERSIFY" \
	  --site-cadscore-step    "$DIVERSIFY" \
	  --build-complexes       "$NUMBER_OF_COMPLEXES_TO_BUILD"
	
	exit 0
fi

################################################################################

ftdmp-all-jury \
  --input-scoring-table     "$PREV_SCORING_RESULTS_FILE" \
  --structure-monomer1      "$PREPARED_STATIC_STRUCTURE_FILE" \
  --structure-monomer2      "$PREPARED_MOBILE_STRUCTURE_FILE" \
  --structure-prefix        "$INPUT_COMPLEX_PREFIX" \
  --structure-suffix        "$INPUT_COMPLEX_SUFFIX" \
  --subselect-contacts      "$INTERFACE_SUBSELECTION" \
  --rank-names              "$SCORING_RANKS" \
  --ranks-top               "$SCORING_TOP_STAGE2" \
  --remap-cadscore          "$REMAP_CADSCORE" \
  --jury-slices             "$SCORING_RANKS_JURY_SLICES" \
  --jury-cluster            "$SCORING_RANKS_JURY_CLUSTER" \
  --jury-max-values         "$SCORING_RANKS_JURY_MAX_VALUES" \
  --redundancy-threshold    "$REDUNDANCY_THRESHOLD" \
  --parallel                "$SCORING_PROCESSORS" \
  --sbatch                  "$SCORING_SBATCH" \
  --output-names-prefix     "raw_"

PREV_SCORING_RESULTS_FILE="${OUTPUT_PATH}/raw_top_scoring_results_RJS.txt"

if [ ! -s "$PREV_SCORING_RESULTS_FILE" ]
then
	echo >&2 "Error: no raw jury results"
	exit 1
fi

################################################################################

if [ "$NUMBER_OF_COMPLEXES_TO_BUILD" -gt "0" ]
then
	NEXT_SCORING_RESULTS_FILE="${OUTPUT_PATH}/raw_top_built_results.txt"
	
	TOP_COMPLEXES_DIR="${OUTPUT_PATH}/raw_top_complexes"
	
	if [ "$DOCKING_REGIME" == "hetero" ]
	then
		TOP_COMPLEXES_RAW_DIR="${OUTPUT_PATH}/raw_top_complexes_raw"
		
		{
		cat "$PREV_SCORING_RESULTS_FILE"
		cat "$PREPARED_STATIC_STRUCTURE_FILE"
		cat "$PREPARED_MOBILE_STRUCTURE_FILE"
		echo "$NUMBER_OF_COMPLEXES_TO_BUILD"
		echo "$MULTIPLY_CHAINS"
		} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$NEXT_SCORING_RESULTS_FILE")" --dependent-file "$NEXT_SCORING_RESULTS_FILE"
		
		if [ ! -s "$NEXT_SCORING_RESULTS_FILE" ]
		then
			rm -rf "$TOP_COMPLEXES_DIR"
			rm -rf "$TOP_COMPLEXES_RAW_DIR"
			
			cat "$PREV_SCORING_RESULTS_FILE" \
			| head -n "$((NUMBER_OF_COMPLEXES_TO_BUILD+1))" \
			| ftdmp-build-complex --monomer1 "$PREPARED_STATIC_STRUCTURE_FILE" --monomer2 "$PREPARED_MOBILE_STRUCTURE_FILE" \
			  --output-prefix "${TOP_COMPLEXES_DIR}/" \
			  --output-suffix ".pdb" \
			> "$NEXT_SCORING_RESULTS_FILE"
			
			if [ -n "$MULTIPLY_CHAINS" ]
			then
				mv "$TOP_COMPLEXES_DIR" "$TOP_COMPLEXES_RAW_DIR"
				
				cat "$NEXT_SCORING_RESULTS_FILE" \
				| tail -n +2 \
				| awk -v inputprefix="${TOP_COMPLEXES_RAW_DIR}/" -v outputprefix="${TOP_COMPLEXES_DIR}/" -v suffix=".pdb" \
				  '{print inputprefix $1 suffix " " outputprefix $1 suffix}' \
				| xargs -L 1 -P "$SCORING_PROCESSORS" bash -c "ftdmp-multiply-chains $MULTIPLY_CHAINS --input \$0 --output \$1"
				
				rm -rf "$TOP_COMPLEXES_RAW_DIR"
			fi
		fi
	fi
	
	if [ "$DOCKING_REGIME" == "homo" ] || [ "$DOCKING_REGIME" == "pre-docked" ]
	then
		{
		cat "$PREV_SCORING_RESULTS_FILE"
		echo "$NUMBER_OF_COMPLEXES_TO_BUILD"
		} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/$(basename "$NEXT_SCORING_RESULTS_FILE")" --dependent-file "$NEXT_SCORING_RESULTS_FILE"
		
		if [ ! -s "$NEXT_SCORING_RESULTS_FILE" ]
		then
			rm -rf "$TOP_COMPLEXES_DIR"
			
			cat "$PREV_SCORING_RESULTS_FILE" \
			| ftdmp-extract-table-columns ID \
			| tail -n +2 \
			| head -n "$NUMBER_OF_COMPLEXES_TO_BUILD" \
			| while read -r IDTOCOPY
			do
				mkdir -p "$(dirname ${TOP_COMPLEXES_DIR}/${IDTOCOPY})"
				cp "${INPUT_COMPLEX_PREFIX}${IDTOCOPY}${INPUT_COMPLEX_SUFFIX}" "${TOP_COMPLEXES_DIR}/${IDTOCOPY}.pdb"
			done
			
			if [ "$(find $TOP_COMPLEXES_DIR -type f -name '*.pdb' -not -empty | wc -l)" -ne "$NUMBER_OF_COMPLEXES_TO_BUILD" ]
			then
				echo >&2 "Error: failed to copy all top complexes"
				exit 1
			fi
			
			cat "$PREV_SCORING_RESULTS_FILE" \
			| head -n "$((NUMBER_OF_COMPLEXES_TO_BUILD+1))" \
			> "$NEXT_SCORING_RESULTS_FILE"
		fi
	fi
	
	PREV_SCORING_RESULTS_FILE="$NEXT_SCORING_RESULTS_FILE"
fi

################################################################################

if [ "$NUMBER_OF_COMPLEXES_TO_BUILD" -lt "1" ] || [ -z "$RELAX_COMPLEXES" ]
then
	exit 0
fi

################################################################################

TOP_RELAXED_COMPLEXES_DIR="${OUTPUT_PATH}/relaxed_top_complexes"

cat "$PREV_SCORING_RESULTS_FILE" \
| tail -n +2 \
| awk -v inputprefix="${TOP_COMPLEXES_DIR}/" -v outputprefix="${TOP_RELAXED_COMPLEXES_DIR}/" -v suffix=".pdb" '{print inputprefix $1 suffix " " outputprefix $1 suffix}' \
| while read UNRELAXEDFILE RELAXEDFILE
do
	{
	cat "$UNRELAXEDFILE"
	echo "$OPENMM_FORCEFIELD"
	echo "$RELAX_COMPLEXES"
	} | ftdmp-check-hash --hash-file "${OUTPUT_PATH}/input_hashes/relaxed_top_complexes/$(basename "$RELAXEDFILE")" --dependent-file "$RELAXEDFILE"
	
	if [ ! -s "$RELAXEDFILE" ]
	then
		echo "${UNRELAXEDFILE} ${RELAXEDFILE}" \
		| awk -v relaxoptions="--forcefield '$OPENMM_FORCEFIELD' --conda-path '$CONDA_PATH' --conda-env '$CONDA_ENV' --no-preparation $RELAX_COMPLEXES" \
		  '{print "ftdmp-relax-with-openmm " relaxoptions " --input " $1 " --output " $2}' \
		| bash
	fi
done

if [ "$(find $TOP_RELAXED_COMPLEXES_DIR -type f -name '*.pdb' -not -empty | wc -l)" -lt "2" ]
then
	echo >&2 "Error: failed to relax top complexes"
	exit 1
fi

################################################################################

ftdmp-all-score \
  --input-from-table        "$PREV_SCORING_RESULTS_FILE" \
  --structure-prefix        "${TOP_RELAXED_COMPLEXES_DIR}/" \
  --structure-suffix        ".pdb" \
  --subselect-contacts      "$INTERFACE_SUBSELECTION" \
  --reference               "$REFERENCE_STRUCTURE_FILE_FOR_COMPARISON" \
  --remap-cadscore          "$REMAP_CADSCORE" \
  --mode-protein            "$SCORING_MODE_PROTEIN" \
  --mode-protein-sr         "$SCORING_MODE_PROTEIN_SIDECHAIN_REBUILT" \
  --mode-generic            "$SCORING_MODE_GENERIC" \
  --mode-generic-sr         "$SCORING_MODE_GENERIC_SIDECHAIN_REBUILT"  \
  --score-symmetry          "$SCORE_SYMMETRY" \
  --keep-top                "$SCORING_TOP_STAGE1" \
  --clash-tour-tolerance    "0.01" \
  --parallel                "$SCORING_PROCESSORS" \
  --sbatch                  "$SCORING_SBATCH" \
  --output-names-prefix     "relaxed_" \
  --output-dir              "$OUTPUT_PATH"

PREV_SCORING_RESULTS_FILE="${OUTPUT_PATH}/relaxed_scoring_results.txt"

if [ ! -s "$PREV_SCORING_RESULTS_FILE" ]
then
	echo >&2 "Error: no relaxed scoring results"
	exit 1
fi

################################################################################

RELAXED_SCORING_RANKS="$(echo "$SCORING_RANKS" | sed 's/\s\+/\n/g' | sed 's/^raw_/relaxed_/' | tr '\n' ' ')"

ftdmp-all-jury \
  --input-scoring-table     "$PREV_SCORING_RESULTS_FILE" \
  --structure-prefix        "${TOP_RELAXED_COMPLEXES_DIR}/" \
  --structure-suffix        ".pdb" \
  --subselect-contacts      "$INTERFACE_SUBSELECTION" \
  --rank-names              "$SCORING_RANKS $RELAXED_SCORING_RANKS" \
  --ranks-top               "999999" \
  --remap-cadscore          "$REMAP_CADSCORE" \
  --jury-slices             "$SCORING_RANKS_JURY_SLICES" \
  --jury-cluster            "$SCORING_RANKS_JURY_CLUSTER" \
  --jury-max-values         "$SCORING_RANKS_JURY_MAX_VALUES" \
  --redundancy-threshold    "$REDUNDANCY_THRESHOLD" \
  --parallel                "$SCORING_PROCESSORS" \
  --sbatch                  "$SCORING_SBATCH" \
  --output-names-prefix     "relaxed_"

PREV_SCORING_RESULTS_FILE="${OUTPUT_PATH}/relaxed_top_scoring_results_RJS.txt"

if [ ! -s "$PREV_SCORING_RESULTS_FILE" ]
then
	echo >&2 "Error: no relaxed jury results"
	exit 1
fi

################################################################################

