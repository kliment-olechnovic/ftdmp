#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'ftdmp-prepare-monomer' prepares a monomer structure for docking with 'ftdmp-dock'

Options:
    --input                   string  *  input file path
    --output                  string  *  output file path for full monomer
    --restrict-input          string     query to restrict input atoms, default is '[]'
    --rename-chain            string     chain name to set or chain renaming rule to apply, default is ''
    --randomize                          flag to center and pseudo-randomly spin the structure
    --random-seed             number     seed for pseudo-random spinning, default is 1, 0 means current time
    --forcefield              string     forcefield name to make structure ready for relaxation, default is ''
    --conda-path              string     conda installation path needed to prepare for relaxation, default is ''
    --conda-env               string     conda environment name needed to prepare for relaxation, default is ''
    --help | -h                          flag to display help message and exit

Examples:

	ftdmp-prepare-monomer --input input/model.pdb --output output/prepared_model

    ftdmp-prepare-monomer --input input/model.pdb --output output/prepared_model --restrict-input '[-chain A]' \
      --randomize --forcefield --conda-path ~/anaconda3 --conda-env alphafold2

EOF
exit 1
}

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [ -z "$FTDMPDIR" ]
then
	export FTDMPDIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
	export PATH="${FTDMPDIR}/core/voronota-js_release:${FTDMPDIR}:${PATH}"
fi

command -v voronota-js &> /dev/null || { echo >&2 "Error: 'voronota-js' executable not in binaries path"; exit 1; }

INFILE=""
OUTFILE=""
OUTFILE_FOR_FTDOCK=""
RESTRICT_INPUT="[]"
RENAME_CHAINS=""
RANDOM_SEED="1"
FORCEFIELD=""
CONDA_PATH=""
CONDA_ENV=""
RANDOMIZE="false"
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--input)
		INFILE="$OPTARG"
		shift
		;;
	--output)
		OUTFILE="$OPTARG"
		shift
		;;
	--output-for-ftdock)
		OUTFILE_FOR_FTDOCK="$OPTARG"
		shift
		;;
	--restrict-input)
		RESTRICT_INPUT="$OPTARG"
		shift
		;;
	--rename-chain)
		RENAME_CHAINS="$OPTARG"
		shift
		;;
	--random-seed)
		RANDOM_SEED="$OPTARG"
		shift
		;;
	--forcefield)
		FORCEFIELD="$OPTARG"
		shift
		;;
	--conda-path)
		CONDA_PATH="$OPTARG"
		shift
		;;
	--conda-env)
		CONDA_ENV="$OPTARG"
		shift
		;;
	--randomize)
		RANDOMIZE="true"
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

if [ -z "$INFILE" ]
then
	echo >&2 "Error: input file path not provided"
	exit 1
fi

if [ -z "$OUTFILE" ] && [ -z "$OUTFILE_FOR_FTDOCK" ]
then
	echo >&2 "Error: output file path not provided"
	exit 1
fi

if [ ! -s "$INFILE" ]
then
	echo >&2 "Error: input file '$INFILE' does not exist"
	exit 1
fi

if [ -n "$FORCEFIELD" ] && [ "$FORCEFIELD" != "amber99sb" ] && [ "$FORCEFIELD" != "amber14-all" ] && [ "$FORCEFIELD" != "amber14-all-no-water" ] && [ "$FORCEFIELD" != "charmm36" ]
then
	echo >&2 "Error: invalid forcefield name '$FORCEFIELD'"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

if [ "$RESTRICT_INPUT" != "[]" ] || [ "$RANDOMIZE" == "true" ]
then
	{
cat << EOF
params={}
params.input_file='$INFILE';
params.output_file='$TMPLDIR/structure_stage1.pdb';
params.restrict_input_atoms='$RESTRICT_INPUT';
params.rename_chains='$RENAME_CHAINS';
params.random_seed='$RANDOM_SEED';
params.randomize='$RANDOMIZE';
EOF

cat << 'EOF'
voronota_import("-file", params.input_file, "-include-heteroatoms", "-include-hydrogens");
voronota_assert_partial_success("Failed to import file");

voronota_restrict_atoms("-use", params.restrict_input_atoms);
voronota_assert_full_success("Failed to restrict input atoms by the input query");

if(params.rename_chains)
{
	voronota_set_chain_name('-chain-name', params.rename_chains);
	voronota_assert_full_success("Failed to rename chains");
}

if(params.randomize==="true")
{
	voronota_center_atoms("-use", "[-non-hydrogen]", "-mean-for-origin");
	voronota_assert_full_success("Failed to center atoms");
	
	voronota_setup_random_seed("-seed", params.random_seed);
	voronota_assert_full_success("Failed to setup random seed");
	
	voronota_move_atoms("-rotate-randomly");
	voronota_assert_full_success("Failed to randomly rotate atoms");
}

voronota_export_atoms("-file", params.output_file, "-as-pdb");
voronota_assert_full_success("Failed to export atoms");
EOF
	} | voronota-js --no-setup-defaults

	if [ ! -s "$TMPLDIR/structure_stage1.pdb" ]
	then
		echo >&2 "Error: failed stage 1 of structure preparation"
		exit 1
	fi
else
	cat "$INFILE" > "$TMPLDIR/structure_stage1.pdb"
fi

if [ -n "$FORCEFIELD" ]
then
	ftdmp-relax-with-openmm \
	  --conda-path "$CONDA_PATH" \
	  --conda-env "$CONDA_ENV" \
	  --no-simulation \
	  --forcefield "$FORCEFIELD" \
	  --trim-output \
	  --input "$TMPLDIR/structure_stage1.pdb" \
	  --output "$TMPLDIR/structure_stage2.pdb"
	
	if [ ! -s "$TMPLDIR/structure_stage2.pdb" ]
	then
		echo >&2 "Error: failed stage 2 of structure preparation"
		exit 1
	fi
else
	mv "$TMPLDIR/structure_stage1.pdb" "$TMPLDIR/structure_stage2.pdb"
fi

{
cat << EOF
params={}
params.input_file='$TMPLDIR/structure_stage2.pdb';
params.output_file_full='$TMPLDIR/structure_stage3a.pdb';
params.output_file_for_ftdock='$TMPLDIR/structure_stage3b.pdb';
EOF

cat << 'EOF'
voronota_import("-file", params.input_file, "-include-heteroatoms", "-include-hydrogens");
voronota_assert_partial_success("Failed to import file");

voronota_center_atoms("-use", "[-non-hydrogen]", "-mean-for-origin");
voronota_assert_full_success("Failed to center atoms");

voronota_export_atoms("-file", params.output_file_full, "-as-pdb");
voronota_assert_full_success("Failed to export atoms");

voronota_delete_tags_of_atoms("-tags", "het");
voronota_assert_full_success("Failed to set all heteroatoms as ordinary atoms");

voronota_restrict_atoms("-use", "[-non-hydrogen]");
voronota_assert_full_success("Failed to restrict atoms to non-hydrogen atoms");

voronota_export_atoms("-file", params.output_file_for_ftdock, "-as-pdb");
voronota_assert_full_success("Failed to export atoms");

EOF
} | voronota-js --no-setup-defaults

if [ ! -s "$TMPLDIR/structure_stage3a.pdb" ] || [ ! -s "$TMPLDIR/structure_stage3b.pdb" ]
then
	echo >&2 "Error: failed stage 3 of structure preparation"
	exit 1
fi

if [ -n "$OUTFILE" ]
then
	mkdir -p "$(dirname "$OUTFILE")"
	mv "$TMPLDIR/structure_stage3a.pdb" "${OUTFILE}"
fi

if [ -n "$OUTFILE_FOR_FTDOCK" ]
then
	mkdir -p "$(dirname "$OUTFILE_FOR_FTDOCK")"
	mv "$TMPLDIR/structure_stage3b.pdb" "${OUTFILE_FOR_FTDOCK}"
fi

