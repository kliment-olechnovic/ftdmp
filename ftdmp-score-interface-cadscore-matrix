#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'ftdmp-score-interface-cadscore-matrix' computes similarity matrix for docking results produced by 'ftdmp-dock'

Options:
    --monomer1 | -m1          string  *  monomer 1 input file path
    --monomer2 | -m2          string  *  monomer 2 input file path
    --parallel-parts          number     total number of parallel parts, default is 1
    --parameters              string     parameters to pass to voronota-js-fast-iface-voromqa, default is ''
    --help | -h                          flag to display help message and exit

Standard input:
    space-separated table of docking results

Standard output:
    space-separated table of scoring results
    
Example:

    cat docking_results_table.txt | ftdmp-score-interface-cadscore-matrix -m1 monomer1.pdb -m2 monomer2.pdb --parallel-parts 16

EOF
exit 1
}

readonly ZEROARG=$0

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [[ $ZEROARG == *"/"* ]]
then
	cd $(dirname $ZEROARG)
	export PATH=$(pwd):$PATH
	cd - &> /dev/null
fi

command -v voronota-js-fast-iface-cadscore &> /dev/null || { echo >&2 "Error: 'voronota-js-fast-iface-cadscore' executable not in binaries path"; exit 1; }

MONOMERFILE1=""
MONOMERFILE2=""
PARALLEL_PARTS="1"
IFACE_CADSCORE_PARAMETERS=""
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-m1|--monomer1)
		MONOMERFILE1="$OPTARG"
		shift
		;;
	-m2|--monomer2)
		MONOMERFILE2="$OPTARG"
		shift
		;;
	--parallel-parts)
		PARALLEL_PARTS="$OPTARG"
		shift
		;;
	--parameters)
		IFACE_CADSCORE_PARAMETERS="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

if [ -z "$MONOMERFILE1" ]
then
	echo >&2 "Error: no static input file specified"
	exit 1
fi

if [ ! -s "$MONOMERFILE1" ]
then
	echo >&2 "Error: no static input file '$MONOMERFILE1'"
	exit 1
fi

if [ -z "$MONOMERFILE2" ]
then
	echo >&2 "Error: no static input file specified"
	exit 1
fi

if [ ! -s "$MONOMERFILE2" ]
then
	echo >&2 "Error: no mobile input file '$MONOMERFILE2'"
	exit 1
fi

if [ -z "$PARALLEL_PARTS" ] || [ "$PARALLEL_PARTS" -ne "$PARALLEL_PARTS" ] || [ "$PARALLEL_PARTS" -lt "1" ]
then
	echo >&2 "Error: invalid number of parallel parts '$PARALLEL_PARTS', must be a positive number"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

cat > "${TMPLDIR}/input"

if [ ! -s "${TMPLDIR}/input" ]
then
	echo >&2 "Error: no input data in stdin"
	exit 1
fi

mkdir -p "${TMPLDIR}/docklines"

cd "${TMPLDIR}/docklines"

cat ../input \
| awk -v m1="$MONOMERFILE1" -v m2="$MONOMERFILE2" '{if($1!="ID"){print "import-docking-result -static-file \"" m1 "\" -mobile-file \"" m2 "\" -ftdock-transform " $3 " " $4 " " $5 " " $6 " " $7 " " $8 " " $9 > $1}}'

cd - &> /dev/null

find "${TMPLDIR}/docklines" -type f -not -empty \
| voronota-js-fast-iface-cadscore --target _all_vs_all --model _list --target-input-is-script --model-input-is-script --processors "$PARALLEL_PARTS" $IFACE_CADSCORE_PARAMETERS \
| tail -n +2 \
| awk '{print $1 " " $2 " " $3 " " $4}' \
> "${TMPLDIR}/output"

if [ ! -s "${TMPLDIR}/output" ]
then
	echo >&2 "Error: no output produced"
	exit 1
fi

cat "${TMPLDIR}/output"

