#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'ftdmp-build-complex' generates structure files from docking results

Options:
    --monomer1                string  *  monomer 1 input file path
    --monomer2                string  *  monomer 2 input file path
    --output-prefix           string  *  output file path prefix, default is ''
    --output-suffix           string     output file path prefix, default is '.pdb'
    --help | -h                          flag to display help message and exit

Standard input:
    space-separated table of docking results

Standard output:
    space-separated table of docking results
    
Example:

    cat docking_results_table.txt | head -5 | ftdmp-build-complex --monomer1 monomer1.pdb --monomer2 monomer2.pdb --output-prefix complexes/

EOF
exit 1
}

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [ -z "$FTDMPDIR" ]
then
	export FTDMPDIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
	export PATH="${FTDMPDIR}/core/voronota-js_release:${FTDMPDIR}:${PATH}"
fi

command -v voronota-js &> /dev/null || { echo >&2 "Error: 'voronota-js-fast-iface-voromqa' executable not in binaries path"; exit 1; }

MONOMERFILE1=""
MONOMERFILE2=""
OUTPUT_PREFIX=""
OUTPUT_SUFFIX=".pdb"
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--monomer1)
		MONOMERFILE1="$OPTARG"
		shift
		;;
	--monomer2)
		MONOMERFILE2="$OPTARG"
		shift
		;;
	--output-prefix)
		OUTPUT_PREFIX="$OPTARG"
		shift
		;;
	--output-suffix)
		OUTPUT_SUFFIX="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

if [ -z "$MONOMERFILE1" ]
then
	echo >&2 "Error: no static input file specified"
	exit 1
fi

if [ ! -s "$MONOMERFILE1" ]
then
	echo >&2 "Error: no static input file '$MONOMERFILE1'"
	exit 1
fi

if [ -z "$MONOMERFILE2" ]
then
	echo >&2 "Error: no static input file specified"
	exit 1
fi

if [ ! -s "$MONOMERFILE2" ]
then
	echo >&2 "Error: no mobile input file '$MONOMERFILE2'"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

cat > "${TMPLDIR}/input"

if [ ! -s "${TMPLDIR}/input" ]
then
	echo >&2 "Error: no input data in stdin"
	exit 1
fi

mkdir -p "${TMPLDIR}/docklines"

cd "${TMPLDIR}/docklines"

cat ../input \
| awk -v m1="$MONOMERFILE1" -v m2="$MONOMERFILE2" -v prefix="$OUTPUT_PREFIX" -v suffix="$OUTPUT_SUFFIX" -v q="'" \
'{
  if($1!="ID")
  {
    print "voronota_import_docking_result(\"-include-hydrogens -static-file " q m1 q " -mobile-file " q m2 q " -generic-transform " $3 " " $4 " " $5 " " $6 " " $7 " " $8 " " $9 " " $10 " " $11 " " $12 " " $13 " " $14 " " $15 "\"); voronota_assert_full_success(\"Failed to import docking results for ID " $1 "\"); outfile=" q prefix $1 suffix q "; voronota_export_atoms(\"-as-pdb -file \"+outfile); voronota_assert_full_success(\"Failed to write file \"+outfile); writeln(outfile);" > $1;
  }
}'

cd - &> /dev/null

mkdir -p "$(dirname "${OUTPUT_PREFIX}name${OUTPUT_SUFFIX}")"

find "${TMPLDIR}/docklines" -type f -not -empty \
| xargs -L 1 -P 1 voronota-js --no-setup-defaults \
> "${TMPLDIR}/output_file_paths"

if [ ! -s "${TMPLDIR}/output_file_paths" ]
then
	echo >&2 "Error: no files generated"
	exit 1
fi

cat "${TMPLDIR}/input"

